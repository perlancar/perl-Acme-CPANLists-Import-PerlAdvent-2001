<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2001 Advent Calendar: Attribute::Overload</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2001 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 18th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Attribute::Overload</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../17th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../19th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>Overloading is great. It allows you to control how your module's
objects reacts when being viewed as a string or a number, or how any
of the standard operations ('.','+','*', etc) act on your
objects. This allows you to do things like implement your own number
classes, have your module's object print out sensible stuff if you use
them in a print statement, etc.</p>
<p>The traditional way to do overloading is with the "use Overload"
directive. This takes a hash of names and values that allows you to
specify which method should be used for which operation (including
stringification and numification.) This is a very simple approach that
suffers from a simple drawback - it's easy to get confused.</p>
<p>Overloading presents a whole new way for a programmer to shoot
themselves in the foot. As operations are synthesised from other
operations (e.g. if no operation is defined for plus then perl will
numify the operator first..then just use normal plus) you can easily
get unexpected chains of events. This is confounded by the fact that
as a programmer you have to keep going to the top hash, looking up
what you said was getting called, scroll back down, meditate on that
for a while, scroll back up, look what you think is being called now,
etc. It's really tiresome and you soon lose the plot of your
evaluation.</p>
<p>Enter Attribute::Overload. This module allows you to declare at each
method exactly what overload operator it is connected to. Suddenly
everything becomes a lot clearer. You can see right there what will be
called. It's not going to stop you shooting yourself in the foot, but
it might make it clear exactly where you're pointing the barrel..</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Attribute::Overload">[Read the documentation for Attribute::Overload on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"></div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/author/JHI/perl/lib/overload.pm">Overloading in Perl</a></li>
<li><a href="http://search.cpan.org/author/ABERGMAN/Attribute-Handlers/lib/Attribute/Handlers.pm">Attribute::Handlers</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:51 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>
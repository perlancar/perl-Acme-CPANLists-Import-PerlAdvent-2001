<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2001 Advent Calendar: Scalar::Util</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2001 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 7th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Scalar::Util</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../6th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../8th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>Just like the vast majority of my programs start with <code>use strict</code> and
<code>use warnings</code>, I tend to have a collection of standard extensions
that I nearly always end up bringing in.  In addition to those modules
that I've mentioned in previous advent calendar days (<b>Carp</b>,
<b>File::Spec</b>, <b>Cwd</b>, <b>Data::Dumper</b>) I always end up seem to bring in
<b>Scalar::Util</b>.</p>
<p>The function that I tend to use most in <b>Scalar::Util</b> is <code>blessed</code>.
It's yet another one of those functions that I could probably write
myself.  But why always reinvent the wheel?  By bringing in <code>blessed</code>
it's simpler, makes my code easier to read, and avoids me having to
worry about annoying bugs and typos.</p>
<p>Another functionality in <b>Scalar::Util</b> that's really important is the
weak referencing system.  Since Perl currently uses a reference count
garbage collector you can get yourself in an awful mess with circular
referencing, and end up eating vast sums of memory - which is bad,
M'kay.  And here's a way out that's simple and straightforward, and
again in a way where I don't have to worry about the details.</p>
<p>Wonderful.  Extensions to perl like this remind me why I love the
resilience and adaptiveness of Perl.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Scalar::Util">[Read the documentation for Scalar::Util on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"></div>
</div>




<div class="box">
<div class="doc"></div>
</div>




 




<!-- Created 2004-12-21T18:29:50 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>
<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2001 Advent Calendar: Test::More</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2001 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 10th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Test::More</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../9th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../11th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>Now this <i>is</i> a module that I use every single day.  Pretty much
all I do at work (and when I'm coding at home) is write POD, write the
tests (using Test::More) for that POD, and then try and get the tests
to pass those tests.  Wash, rinse, repeat.</p>
<p><b>Test::More</b> is great and is <i>such</i> an improvement over <b>Test.pm</b>.
As well as providing a mechanism for deciding if tests have passed or
failed <b>Test::More</b> allows the testing harness to understand what you
were expecting and to have some idea of what the test for.  This means
that <b>Test::More</b> can be used in development in order to work out what
your program is doing wrong (rather than it's just doing
<i>something</i> wrong.)  It's the difference between knowing that
your car is working or broke, or knowing that your car's tire is flat
and you probably need to inflate it.</p>
<p>One example of this is the introduction of names for tests.  You name
the tests, and when one fails you can find it easily in your code and
have a hope of working out what's actually wrong.  Another simple, but
really useful addition is the <code>is</code> and <code>like</code> methods that allow you
to tell the test routine what you're expecting out and get it to work
out if it's true - and more importantly print out proper debug
information if it's not.</p>
<p><b>Test::More</b> doesn't really give you anymore power than <b>Test</b>, but it
<i>does</i> allow you to quickly craft test suites that behave
properly and print out proper information when things go wrong.  It
puts the laziness back into test writing.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Test::More">[Read the documentation for Test::More on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"></div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/author/MSCHWERN/Test-Simple/lib/Test/Simple.pm">Test::Simple - simplier version</a></li>
<li><a href="http://search.cpan.org/author/MSCHWERN/Test-Simple/lib/Test/Tutorial.pod">Test::Tutorial - a guide to testing</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:50 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>
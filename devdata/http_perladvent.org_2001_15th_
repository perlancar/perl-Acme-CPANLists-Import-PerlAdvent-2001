<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2001 Advent Calendar: Pod::Coverage</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2001 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 15th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Pod::Coverage</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../14th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../16th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>When you write Perl modules you should include documentation with the
code so that people know how to use it. Actually this is backwards -
you should write documentation so you know what you're coding. Either
way, documentation and code should go hand in hand.</p>
<p>We need documentation as sooner or later we all have to use the code
that someone else has written. It's a real pain to have to use or
modify some code when you don't know what the code is supposed to do
and you can't get hold of the author. Everyone should simply document,
document, document.</p>
<p>The problem with this is that sometimes things get overlooked - and
it's the person that's writing the code and documenting it that's the
most likely to fail to spot when something isn't documented as they're
simply too close to the code itself and the assumptions they've
made. What we need is some automated tool that could intelligently go
though our code and quickly check what methods, subroutines and
accessors haven't been documented in the POD. And this is exactly what
<b>Pod::Coverage</b> does. Flawlessly, quickly, easily, and simply.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Pod::Coverage">[Read the documentation for Pod::Coverage on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"></div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://perldoc.com/perl5.8.0/pod/perlpod.html">perlpod</a></li>
<li><a href="http://perldoc.com/perl5.8.0/pod/perlpodspec.html">perlpodspec</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:51 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>
<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2001 Advent Calendar: Exporter::Simple</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2001 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 21st day of Advent my True Language brought to me..
</div>
<div class="modtitle">Exporter::Simple</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../20th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../22nd/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>While it may be more fashionable these days to use object orintated
coding techniques there are still many situations where it makes more
sense to use exported functions as an alternative interface to your
code. That is to say, where it makes more sense to set up your module
to place functions directly into your current namespace when you load
the module with a "use" statement where they can be called directly</p>
<p>Though it is possible to 'copy' functions and varibles into another
namespace by hand by playing with typeglobs, almost no-one does this,
instead they use the <b>Exporter</b> module. This is a module that ships
with perl that allows you to declare in a set of package wide arrays
and hashes which functions and varibles should be exported and which
extra funtions and varibles should also be avalible if the user passes
extra info in the arguments to the use statment.</p>
<p>This works quite well - up until a point. The problem is that it
suffers again from the problem that the overload pragma had; You're
declaring all the export stuff somewhere where that's not right next
to the code you're actually exporting. This means that you have to
keep scrolling up and down your code to add in new functions, and it's
very easy to forget to update the exporter list. Also, it means that
you have to type the name of each function twice...and that's not a
very lazy thing to do. When it comes down to it, it's a pain to
maintain the code.</p>
<p>The solution of course is to have an attribute on each method that
declares if it's exportable and in what situation. Which is what this
module does. Now you can just say <i>right there</i> what you want to use,
and it's a lot clearer when you're reading a method exactly when and
how it will be called. Good stuff.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Exporter::Simple">[Read the documentation for Exporter::Simple on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"></div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/author/JHI/perl/lib/Exporter.pm">Exporter</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:51 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>
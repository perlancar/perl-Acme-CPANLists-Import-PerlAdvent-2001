<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2001 Advent Calendar: Parse::RecDescent</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2001 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 25th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Parse::RecDescent</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../24th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="/2002/1st/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>There's More Than One Way To Do It. And sometimes, just sometimes,
that way is not with Perl. It's just easier to do it in another
language. Doesn't mean you can't write that language in Perl however.</p>
<p><b>Parse::RecDescent</b>, is, as the name suggests, a recursive decent
parser. This means that it's a module that can be used to make a
grammar, a set of rules for breaking up a source file into tokens that
the computer can understand. Think of it as a giant regular expression
that you can tie code to various sections it matches.</p>
<p>Though defining how to parse some source code, and defining what to do
with the results of that coding (either immediately as a interpreter
or storing it away in some kind of abstract tree structure for later
processing) it's possible to define your own little mini
languages. These don't have to be the next Perl - they can be very
domain particular. For example you may use Parse::RecDescent to read
in your config file. Or parse output from another program.</p>
<p>Armed with this module, and a copy of the <li><a href="http://www.jargon.net/jargonfile/d/DragonBook.html">Dragon Book</a></li>, you should
be able to do anything. The perfect Perl Christmas present ;-)</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Parse::RecDescent">[Read the documentation for Parse::RecDescent on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"></div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/author/TBONE/Parse-RecDescent-FAQ/FAQ.pm">Parse::ReqDecsent FAQ</a></li>
<li><a href="http://www.jargon.net/jargonfile/d/DragonBook.html">The Dragon Book</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:51 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>